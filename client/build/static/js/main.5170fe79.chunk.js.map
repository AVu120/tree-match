{"version":3,"sources":["components/Question/Question.module.css","components/Match/Match.module.css","components/Introduction/Introduction.module.css","utilities/standard-colors.js","components/Match/Match.js","components/Introduction/Introduction.js","components/Question/Question.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","DARK_GREEN","LEAFY_GREEN","useStyles","makeStyles","theme","button","margin","padding","backgroundColor","standardColors","color","Match","data","setShownSection","classes","className","css","match_text","match","name","description","Button","variant","onClick","Introduction","introduction_text","Question","setData","useState","questionCount","setQuestionCount","stepId","question","step_id","answers","numberOfAnswers","length","answerQuestion","answer","fetch","process","method","headers","body","JSON","stringify","then","res","json","useEffect","state","question_text","question_answers_row","question_answers_grid","map","index","Select","onChange","event","target","value","MenuItem","CircularProgress","style","marginTop","App","shownSection","section","toggleSection","href","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5170fe79.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Question\":\"Question_Question__3xqkj\",\"question_text\":\"Question_question_text__1oxFJ\",\"question_answers_row\":\"Question_question_answers_row__4LFf7\",\"question_answers_grid\":\"Question_question_answers_grid__1BpW7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Match\":\"Match_Match__ot8hF\",\"match_text\":\"Match_match_text__2Im4t\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Introduction\":\"Introduction_Introduction__1f24m\",\"introduction_text\":\"Introduction_introduction_text__-Hp0I\"};","export const DARK_GREEN = \"#184655\";\r\nexport const LEAFY_GREEN = \"#3C8F7D\";\r\n","import Button from \"@material-ui/core/Button\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport * as standardColors from \"../../utilities/standard-colors\";\r\nimport css from \"./Match.module.css\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  button: {\r\n    \"& > *\": {\r\n      margin: 0,\r\n      padding: \"5px\",\r\n    },\r\n    \"&:hover\": {\r\n      backgroundColor: standardColors.LEAFY_GREEN,\r\n    },\r\n    backgroundColor: standardColors.DARK_GREEN,\r\n    color: \"white\",\r\n  },\r\n}));\r\n\r\nconst Match = ({ data, setShownSection }) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <div className={css.Match}>\r\n      <h1>Match found!</h1>\r\n      <h2\r\n        className={css.match_text}\r\n      >{`You should plant a ${data.match.name}. ${data.match.description}`}</h2>\r\n      <Button\r\n        variant=\"contained\"\r\n        onClick={() => setShownSection(\"question\")}\r\n        className={classes.button}\r\n      >\r\n        Restart\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nMatch.propTypes = {\r\n  data: PropTypes.object,\r\n  setShownSection: PropTypes.func,\r\n};\r\n\r\nexport default Match;\r\n","import Button from \"@material-ui/core/Button\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport * as standardColors from \"../../utilities/standard-colors\";\r\nimport css from \"./Introduction.module.css\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  button: {\r\n    \"& > *\": {\r\n      margin: 0,\r\n      padding: \"5px\",\r\n    },\r\n    \"&:hover\": {\r\n      backgroundColor: standardColors.LEAFY_GREEN,\r\n    },\r\n    backgroundColor: standardColors.DARK_GREEN,\r\n    color: \"white\",\r\n  },\r\n}));\r\n\r\nconst Introduction = ({ setShownSection }) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <div className={css.Introduction}>\r\n      <h1>Welcome to TreeMatch!</h1>\r\n      <h2 className={css.introduction_text}>\r\n        Click start below and we'll tell you what kind of tree you should plant\r\n        in your garden.\r\n      </h2>\r\n      <Button\r\n        variant=\"contained\"\r\n        onClick={() => setShownSection(\"question\")}\r\n        className={classes.button}\r\n      >\r\n        Start\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nIntroduction.propTypes = {\r\n  setShownSection: PropTypes.func,\r\n};\r\n\r\nexport default Introduction;\r\n","import Button from \"@material-ui/core/Button\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useEffect, useState } from \"react\";\r\nimport * as standardColors from \"../../utilities/standard-colors\";\r\nimport css from \"./Question.module.css\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  button: {\r\n    \"& > *\": {\r\n      margin: 0,\r\n      padding: \"5px\",\r\n    },\r\n    \"&:hover\": {\r\n      backgroundColor: standardColors.LEAFY_GREEN,\r\n    },\r\n    backgroundColor: standardColors.DARK_GREEN,\r\n    color: \"white\",\r\n  },\r\n}));\r\n\r\nconst Question = ({ data, setData }) => {\r\n  const classes = useStyles();\r\n  const [questionCount, setQuestionCount] = useState(0);\r\n  const stepId = data.question?.step_id;\r\n  const answers = data.question?.answers;\r\n  const numberOfAnswers = data.question?.answers?.length;\r\n\r\n  // Send answer data to api which replies with another question data or match data.\r\n  const answerQuestion = (step_id, answer) => {\r\n    fetch(`${process.env.REACT_APP_BASE_API_URL}/answers`, {\r\n      method: \"post\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({ step_id, answer }),\r\n    })\r\n      .then((res) => res.json())\r\n      .then((res) => setData(res));\r\n  };\r\n\r\n  // Retrieve first question data from api on load.\r\n  useEffect(() => {\r\n    fetch(`${process.env.REACT_APP_BASE_API_URL}/begin`)\r\n      .then((res) => res.json())\r\n      .then((res) => setData(res));\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  // Increment question number after receiving new question data in api response.\r\n  useEffect(() => {\r\n    if (!data.question) return;\r\n    setQuestionCount((state) => state + 1);\r\n    // eslint-disable-next-line\r\n  }, [stepId]);\r\n\r\n  return (\r\n    <div className={css.Question}>\r\n      {data.question ? (\r\n        <>\r\n          <h1>{`Question ${questionCount}`}</h1>\r\n          <h2 className={css.question_text}>{data.question?.question}</h2>\r\n          {numberOfAnswers < 5 ? (\r\n            <div\r\n              className={`${css.question_answers_row} ${\r\n                numberOfAnswers === 4 ? css.question_answers_grid : \"\"\r\n              }`}\r\n            >\r\n              {answers.map((answer, index) => (\r\n                <Button\r\n                  key={`Question ${questionCount} Answer ${index + 1}`}\r\n                  variant=\"contained\"\r\n                  onClick={() => answerQuestion(stepId, answer)}\r\n                  className={classes.button}\r\n                >\r\n                  {answer}\r\n                </Button>\r\n              ))}\r\n            </div>\r\n          ) : (\r\n            <Select\r\n              onChange={(event) => answerQuestion(stepId, event.target.value)}\r\n              variant=\"outlined\"\r\n            >\r\n              {answers.map((answer, index) => (\r\n                <MenuItem\r\n                  key={`Question ${questionCount} Answer ${index + 1}`}\r\n                  value={answer}\r\n                >\r\n                  {answer}\r\n                </MenuItem>\r\n              ))}\r\n            </Select>\r\n          )}\r\n        </>\r\n      ) : (\r\n        <CircularProgress\r\n          style={{ color: standardColors.LEAFY_GREEN, marginTop: \"20px\" }}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nQuestion.propTypes = {\r\n  data: PropTypes.object,\r\n  setData: PropTypes.func,\r\n};\r\n\r\nexport default Question;\r\n","import { useEffect, useState } from \"react\";\r\nimport \"./App.css\";\r\nimport Match from \"./components/Match/Match\";\r\nimport Introduction from \"./components/Introduction/Introduction\";\r\nimport Questions from \"./components/Question/Question\";\r\n\r\nfunction App() {\r\n  const [shownSection, setShownSection] = useState(\"introduction\"); // 3 sections in total: introduction, question and match.\r\n  const [data, setData] = useState({ question: null, match: null });\r\n\r\n  const toggleSection = (section) => {\r\n    switch (section) {\r\n      case \"introduction\":\r\n        return <Introduction setShownSection={setShownSection} />;\r\n      case \"question\":\r\n        return <Questions data={data} setData={setData} />;\r\n      default:\r\n        return <Match data={data} setShownSection={setShownSection} />;\r\n    }\r\n  };\r\n\r\n  // Show match component when a match is detected in the api response.\r\n  useEffect(() => {\r\n    if (!data.match) return;\r\n    setShownSection(\"match\");\r\n  }, [data.match]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"window\">{toggleSection(shownSection)}</div>\r\n      <a\r\n        className=\"wallpaper_attribution\"\r\n        href=\"https://www.freepik.com/free-vector/kids-planting-tree-city-park-children-with-gardening-tools-working-with-green-plants-outdoors_11235616.htm#page=1&query=garden%20planting&position=0\"\r\n      >\r\n        Background designed by pch.vector / Freepik\r\n      </a>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}